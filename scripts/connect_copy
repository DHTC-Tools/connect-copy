#!/usr/bin/python

#  File:     connect_copy.py
#
#  Author:   Suchandra Thapa
#  e-mail:   sthapa@ci.uchicago.edu
#
#
# Copyright (c) University of Chicago. 2014
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import subprocess
import shutil
import optparse
import platform
import tempfile
import urllib2
import tarfile
import time
import re


TICKET_CONTENTS = """%%%TICKET%%%
"""
CHIRP_MOUNT = '%%%CHIRP_MOUNT%%%'
CATALOG_HOST = 'stash.opensciencegrid.net'
PARROT_URL = '%%%PARROT_URL%%%'
VERSION = '0.01-osgc'


def write_ticket(directory):
    """
    Write out ticket information in directory specified
    """
    if not os.path.exists(directory) or not os.path.isdir(directory):
        return None
    try:
        ticket = open(os.path.join(directory, 'chirp.ticket'), 'w')
        ticket.write(TICKET_CONTENTS)
        ticket.close()
        return True
    except IOError:
        return None


def ticket_valid():
    """
    Check a ticket to see if it's still valid
    """
    if TICKET_CONTENTS == "":
        # Don't need to worry about ticket expiration if the ticket is not present
        return True
    ticket_expiration = re.compile(r'Expires on (\w+\s+\w+\s+\d{1,2}\s+\d\d:\d\d:\d\d\s+\d{4})')
    match = ticket_expiration.search(TICKET_CONTENTS)
    if match is None:
        # if no expiration written, assume ticket doesn't expire
        return True
    expiration = time.strptime(match.group(1),
                               "%a %b %d %H:%M:%S %Y")
    return time.time() < time.mktime(expiration)


def download_tarball(url, path):
    """Download a tarball from a given url and extract it to specified path"""

    (fhandle, download_file) = tempfile.mkstemp(dir=path)
    url_handle = urllib2.urlopen(url)
    url_data = url_handle.read(2048)
    while url_data:
        os.write(fhandle, url_data)
        url_data = url_handle.read(2048)
    os.close(fhandle)
    downloaded_tarfile = tarfile.open(download_file)
    cur_dir = os.getcwd()
    os.chdir(path)
    extract_path = os.path.join(path,
                                downloaded_tarfile.getmembers()[0].name)
    for tar_info in downloaded_tarfile:
        downloaded_tarfile.extract(tar_info)
    os.unlink(download_file)
    os.chdir(cur_dir)
    return extract_path


def setup_parrot(directory):
    """
    Download correct parrot binaries and setup in temp directory
    """
    sys_ver = platform.dist()[1][0]
    parrot_url = PARROT_URL + "/parrot-sl%s.tar.gz" % sys_ver
    parrot_path = download_tarball(parrot_url, directory)
    return parrot_path


def generate_env(parrot_path):
    """
    Create a dict with the environment variables for binary + parrot
    """
    job_env = os.environ.copy()

    job_env['PARROT_HELPER'] = os.path.join(parrot_path,
                                            'parrot',
                                            'lib',
                                            'libparrot_helper.so')
    job_env['CHIRP_MOUNT'] = CHIRP_MOUNT
    job_env['CATALOG_HOST'] = CATALOG_HOST
    return job_env

def fixup_paths(fpath):
    """
    Fix paths so that CHIRP_MOUNT or other paths work correctly
    """
    if fpath.startswith('-'):
        # not really a file path
        return fpath
    elif fpath.startswith('CHIRP'):
        return fpath.replace('CHIRP', CHIRP_MOUNT)
    else:
        return os.path.join(os.getcwd(), fpath)


def run_copy(temp_dir, args):
    """
    Run cp command with specified arguments in parrot environment
    """
    job_env = generate_env(temp_dir)
    job_args = ['./parrot/bin/parrot_run',
                '-t',
                os.path.join(temp_dir, 'parrot_cache')]
    if TICKET_CONTENTS != "":
        job_args.extend(['-i', 'chirp.ticket'])
    job_args.append('/bin/cp')
    # fix paths in args before changing to working dir
    fixed_args = [ fixup_paths(x) for x in args ]
    os.chdir(temp_dir)
    if len(args) > 1:
        job_args.extend(fixed_args)

    return subprocess.call(job_args, env=job_env)


def main():
    """Setup and run application"""
    parser = optparse.OptionParser(version="%prog opts src dest" + VERSION)
    parser.add_option("-d", "--debug",
                      dest="debug",
                      help="Enabling debugging",
                      action="store_true",
                      default=False)
    parser.add_option("--preserve-dir",
                      dest="preserve_dir",
                      help="Preserver working directory for debugging",
                      action="store_true",
                      default=False)
    (options, args) = parser.parse_args()
    try:
        temp_dir = tempfile.mkdtemp()
    except IOError:
        sys.stderr.write("Can't create temporary directory, exiting...\n")
        sys.exit(1)

    if TICKET_CONTENTS != "":
        if not ticket_valid():
            sys.stderr.write("ERROR: Ticket expired, exiting...\n")
            sys.exit(1)
        if not write_ticket(temp_dir):
            sys.stderr.write("Can't create ticket, exiting...\n")
            sys.exit(1)

    if len(sys.argv) < 2:
        sys.stderr.write("Need to give source and destination")
        sys.exit(1)

    if not setup_parrot(temp_dir):
        sys.stderr.write("Can't download parrot binaries, exiting...\n")
        sys.exit(1)
    exit_code = run_copy(temp_dir, args)
    if exit_code != 0:
        sys.stderr.write("Application exited with error\n")
        if options.debug:
            sys.stderr.write("Exit code: %d\n" % exit_code)
        sys.exit(exit_code)

    if options.preserve_dir:
        sys.stdout.write("Temp directory at %s\n" % temp_dir)
    else:
        shutil.rmtree(temp_dir)
    sys.exit(exit_code)

if __name__ == '__main__':
    main()
